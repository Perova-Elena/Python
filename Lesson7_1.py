class Matrix:

    def __init__(self, input_data):  # Перегрузка конструктора, принимает список списков = матрицу
        self.input = input_data

    def __str__(self):  # Перегрузка метода __str__когда нужно преобразовать объект в строку
        return '\n'.join('  '.join(str(el) for el in line) for line in self.input)  # Соединяем сначала пары (' 'пробелом между числами, затем строки через перенос строки \n между ними

    def __add__(self, other):  # Перегрузка метода сложения объектов
        answer = ''
        if len(self.input) == len(other.input):  # Проверка длины(количества строк) в матрцах, совпадает ли? иначе не сложить
            for line_1, line_2 in zip(self.input, other.input):  # Для каждой пары строк при объединении матриц (zip попарно объединяет элементы в кортежи) выполнить:
                if len(line_1) != len(line_2):  # Если в строках матриц разное число элементов (например [1,2] и [1,2,3])
                    return 'Ошибка! Неравное число элементов в строках матриц.'
                summed_line = [x + y for x, y in zip(line_1, line_2)] # Генератор - Сумма элементов матриц построчно
                answer +=  '  '.join(str(i) for i in summed_line) + '\n'  # Сразу же формируем суммарную матрицу
        else:
            return 'Ошибка! Нельзя сложить 2 матрицы разного размера!'
        return answer

matrix_1 = Matrix([[1, 2, 3], [3, 4, 7], [5, 6, 9], [7, 8, 0]])
matrix_2 = Matrix([[0, -1, 1], [0, -1, 4], [0, -1, 8], [0, -1, 7]])

print(matrix_1)  # Поскольку print, то запускается перегрузка метода __str__
print()
print(matrix_2)
print()
print("Ниже сумма двух матриц")
print()
print(matrix_1 + matrix_2)  # Поскольку идет операция сложения, то запускается перегрузка метода __add__